const bot = require("../bot");
const redisClient = require("../redis");
const axios = require("axios");

const createOrder = async (msg, productType) => {
  const chatId = msg.chat.id.toString();

  const clothType = await redisClient.get(`${chatId}:cloth`);
  if (!clothType) {
    return bot.sendMessage(chatId, "‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å —Ç–∏–ø –æ–¥—è–≥—É.");
  }

  try {
    const { data: user } = await axios.get(
      "https://prano.group/api/telegram/user",
      {
        headers: {
          Authorization: chatId.toString(),
        },
      }
    );

    await axios.post(
      "https://prano.group/api/telegram/order",
      {
        name: user.name,
        email: user.email,
        phone: user.phone,
        clothType,
        productType,
      },
      {
        headers: { Authorization: chatId },
      }
    );

    const keyboardButtons = [
      ["üí∞ –ü–æ—Å–ª—É–≥–∏", "üë§ –ü—Ä–æ—Ñ—ñ–ª—å"],
      ["‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"],
      ["üßæ –í–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å", "üìç –ê–¥—Ä–µ—Å–∏ –ø—É–Ω–∫—Ç—ñ–≤ –ø—Ä–∏–π–æ–º—É"],
      ["üö™ –í–∏–π—Ç–∏"],
    ];

    const keyboard = {
      reply_markup: {
        keyboard: keyboardButtons,
        resize_keyboard: true,
        one_time_keyboard: false,
      },
      parse_mode: "Markdown",
      disable_web_page_preview: true,
    };

    bot.sendMessage(
      chatId,
      `‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${clothType} (${productType})`,
      keyboard
    );
  } catch (e) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:", e.message);
    bot.sendMessage(
      chatId,
      "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    );
  }
};

bot.on("message", async (msg) => {
  const text = msg.text;

  if (text === "üßº –•—ñ–º—á–∏—Å—Ç–∫–∞") createOrder(msg, "–•—ñ–º—á–∏—Å—Ç–∫–∞");
  if (text === "–ü—Ä–∞–Ω–Ω—è") createOrder(msg, "–ü—Ä–∞–Ω–Ω—è");
  if (text === "–ß–∏—Å—Ç–∫–∞ –≤–∑—É—Ç—Ç—è") createOrder(msg, "–ß–∏—Å—Ç–∫–∞ –≤–∑—É—Ç—Ç—è");
  if (text === "–†–µ—Å—Ç–∞–≤—Ä–∞—Ü—ñ—è –≤–∑—É—Ç—Ç—è") createOrder(msg, "–†–µ—Å—Ç–∞–≤—Ä–∞—Ü—ñ—è –≤–∑—É—Ç—Ç—è");
  if (text === "–†–µ–º–æ–Ω—Ç –æ–¥—è–≥—É") createOrder(msg, "–†–µ–º–æ–Ω—Ç –æ–¥—è–≥—É");
  if (text === "–†–µ—Å—Ç–∞–≤—Ä–∞—Ü—ñ—è —Å—É–º–æ–∫") createOrder(msg, "–†–µ—Å—Ç–∞–≤—Ä–∞—Ü—ñ—è —Å—É–º–æ–∫");
  if (text === "üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏") {
    const message = "üö´ –í–∏ —Å–∫–∞—Å—É–≤–∞–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è";

    const chatId = msg.chat.id.toString();
    const phone = await redisClient.get(chatId);

    const keyboardButtons = [
      ["üí∞ –ü–æ—Å–ª—É–≥–∏", "üë§ –ü—Ä–æ—Ñ—ñ–ª—å"],
      ["‚úçÔ∏è –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"],
      ["üßæ –í–∞—à–∞ —ñ—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å"],
    ];
    if (phone) keyboardButtons.push(["üö™ –í–∏–π—Ç–∏"]);

    const keyboard = {
      reply_markup: {
        keyboard: keyboardButtons,
        resize_keyboard: true,
        one_time_keyboard: false,
      },
      parse_mode: "Markdown",
      disable_web_page_preview: true,
    };

    bot.sendMessage(chatId, message, keyboard);
  }
});
